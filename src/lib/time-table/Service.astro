---
import type { Service } from '$lib/types/liveTimes.d';
import { db, eq, ClassCache } from 'astro:db';
import { ofetch } from 'ofetch';

interface Props {
	service: Service;
}

const { service } = Astro.props;

const rttLink = `https://www.realtimetrains.co.uk/service/gb-nr:${service.serviceUid}/${service.runDate}/detailed`;
const rrLink = `https://live.rail-record.co.uk/train.php/?c=${service.serviceUid}&d=${service.runDate}`;

const classes = await fetchClasses();

async function fetchClasses(): Promise<number[]> {
	const saved = await db
		.select()
		.from(ClassCache)
		.where(eq(ClassCache.rtt_url, rttLink));

	if (saved.length) {
		return saved.map((record) => record.class_number);
	}

	const data = await ofetch(rttLink, { responseType: 'text' });
	const matches = data.matchAll(/<span class="identity">(\d+)<\/span>/g);

	const classes = Array.from(matches)
		.flatMap(([, classNumber]) => classNumber && parseInt(classNumber))
		.filter(
			(classNumber): classNumber is number =>
				typeof classNumber == 'number' && !isNaN(classNumber),
		);

	await db.insert(ClassCache).values(
		classes.map((class_number) => ({
			rtt_url: rttLink,
			class_number,
		})),
	);

	return classes;
}
---

<tr>
	<td>{service.locationDetail.origin[0]?.publicTime}</td>
	<td>{service.locationDetail.origin.map((o) => o.description)}</td>
	<td>{service.locationDetail.destination.map((o) => o.description)}</td>
	<td>{service.atocCode}</td>
	<td>{service.serviceUid}</td>
	<td>{classes.join(', ')}</td>
	<td><a target="_blank" href={rttLink}> RTT </a></td>
	<td><a target="_blank" href={rrLink}> RR </a></td>
</tr>
